// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/19/2020 09:08:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FFT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FFT_vlg_sample_tst(
	input_im,
	input_re,
	sampler_tx
);
input [63:0] input_im;
input [63:0] input_re;
output sampler_tx;

reg sample;
time current_time;
always @(input_im or input_re)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FFT_vlg_check_tst (
	output_im,
	output_re,
	sampler_rx
);
input [87:0] output_im;
input [87:0] output_re;
input sampler_rx;

reg [87:0] output_im_expected;
reg [87:0] output_re_expected;

reg [87:0] output_im_prev;
reg [87:0] output_re_prev;

reg [87:0] output_im_expected_prev;
reg [87:0] output_re_expected_prev;

reg [87:0] last_output_im_exp;
reg [87:0] last_output_re_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	output_im_prev = output_im;
	output_re_prev = output_re;
end

// update expected /o prevs

always @(trigger)
begin
	output_im_expected_prev = output_im_expected;
	output_re_expected_prev = output_re_expected;
end


// expected output_im[ 87 ]
initial
begin
	output_im_expected[87] = 1'bX;
end 
// expected output_im[ 86 ]
initial
begin
	output_im_expected[86] = 1'bX;
end 
// expected output_im[ 85 ]
initial
begin
	output_im_expected[85] = 1'bX;
end 
// expected output_im[ 84 ]
initial
begin
	output_im_expected[84] = 1'bX;
end 
// expected output_im[ 83 ]
initial
begin
	output_im_expected[83] = 1'bX;
end 
// expected output_im[ 82 ]
initial
begin
	output_im_expected[82] = 1'bX;
end 
// expected output_im[ 81 ]
initial
begin
	output_im_expected[81] = 1'bX;
end 
// expected output_im[ 80 ]
initial
begin
	output_im_expected[80] = 1'bX;
end 
// expected output_im[ 79 ]
initial
begin
	output_im_expected[79] = 1'bX;
end 
// expected output_im[ 78 ]
initial
begin
	output_im_expected[78] = 1'bX;
end 
// expected output_im[ 77 ]
initial
begin
	output_im_expected[77] = 1'bX;
end 
// expected output_im[ 76 ]
initial
begin
	output_im_expected[76] = 1'bX;
end 
// expected output_im[ 75 ]
initial
begin
	output_im_expected[75] = 1'bX;
end 
// expected output_im[ 74 ]
initial
begin
	output_im_expected[74] = 1'bX;
end 
// expected output_im[ 73 ]
initial
begin
	output_im_expected[73] = 1'bX;
end 
// expected output_im[ 72 ]
initial
begin
	output_im_expected[72] = 1'bX;
end 
// expected output_im[ 71 ]
initial
begin
	output_im_expected[71] = 1'bX;
end 
// expected output_im[ 70 ]
initial
begin
	output_im_expected[70] = 1'bX;
end 
// expected output_im[ 69 ]
initial
begin
	output_im_expected[69] = 1'bX;
end 
// expected output_im[ 68 ]
initial
begin
	output_im_expected[68] = 1'bX;
end 
// expected output_im[ 67 ]
initial
begin
	output_im_expected[67] = 1'bX;
end 
// expected output_im[ 66 ]
initial
begin
	output_im_expected[66] = 1'bX;
end 
// expected output_im[ 65 ]
initial
begin
	output_im_expected[65] = 1'bX;
end 
// expected output_im[ 64 ]
initial
begin
	output_im_expected[64] = 1'bX;
end 
// expected output_im[ 63 ]
initial
begin
	output_im_expected[63] = 1'bX;
end 
// expected output_im[ 62 ]
initial
begin
	output_im_expected[62] = 1'bX;
end 
// expected output_im[ 61 ]
initial
begin
	output_im_expected[61] = 1'bX;
end 
// expected output_im[ 60 ]
initial
begin
	output_im_expected[60] = 1'bX;
end 
// expected output_im[ 59 ]
initial
begin
	output_im_expected[59] = 1'bX;
end 
// expected output_im[ 58 ]
initial
begin
	output_im_expected[58] = 1'bX;
end 
// expected output_im[ 57 ]
initial
begin
	output_im_expected[57] = 1'bX;
end 
// expected output_im[ 56 ]
initial
begin
	output_im_expected[56] = 1'bX;
end 
// expected output_im[ 55 ]
initial
begin
	output_im_expected[55] = 1'bX;
end 
// expected output_im[ 54 ]
initial
begin
	output_im_expected[54] = 1'bX;
end 
// expected output_im[ 53 ]
initial
begin
	output_im_expected[53] = 1'bX;
end 
// expected output_im[ 52 ]
initial
begin
	output_im_expected[52] = 1'bX;
end 
// expected output_im[ 51 ]
initial
begin
	output_im_expected[51] = 1'bX;
end 
// expected output_im[ 50 ]
initial
begin
	output_im_expected[50] = 1'bX;
end 
// expected output_im[ 49 ]
initial
begin
	output_im_expected[49] = 1'bX;
end 
// expected output_im[ 48 ]
initial
begin
	output_im_expected[48] = 1'bX;
end 
// expected output_im[ 47 ]
initial
begin
	output_im_expected[47] = 1'bX;
end 
// expected output_im[ 46 ]
initial
begin
	output_im_expected[46] = 1'bX;
end 
// expected output_im[ 45 ]
initial
begin
	output_im_expected[45] = 1'bX;
end 
// expected output_im[ 44 ]
initial
begin
	output_im_expected[44] = 1'bX;
end 
// expected output_im[ 43 ]
initial
begin
	output_im_expected[43] = 1'bX;
end 
// expected output_im[ 42 ]
initial
begin
	output_im_expected[42] = 1'bX;
end 
// expected output_im[ 41 ]
initial
begin
	output_im_expected[41] = 1'bX;
end 
// expected output_im[ 40 ]
initial
begin
	output_im_expected[40] = 1'bX;
end 
// expected output_im[ 39 ]
initial
begin
	output_im_expected[39] = 1'bX;
end 
// expected output_im[ 38 ]
initial
begin
	output_im_expected[38] = 1'bX;
end 
// expected output_im[ 37 ]
initial
begin
	output_im_expected[37] = 1'bX;
end 
// expected output_im[ 36 ]
initial
begin
	output_im_expected[36] = 1'bX;
end 
// expected output_im[ 35 ]
initial
begin
	output_im_expected[35] = 1'bX;
end 
// expected output_im[ 34 ]
initial
begin
	output_im_expected[34] = 1'bX;
end 
// expected output_im[ 33 ]
initial
begin
	output_im_expected[33] = 1'bX;
end 
// expected output_im[ 32 ]
initial
begin
	output_im_expected[32] = 1'bX;
end 
// expected output_im[ 31 ]
initial
begin
	output_im_expected[31] = 1'bX;
end 
// expected output_im[ 30 ]
initial
begin
	output_im_expected[30] = 1'bX;
end 
// expected output_im[ 29 ]
initial
begin
	output_im_expected[29] = 1'bX;
end 
// expected output_im[ 28 ]
initial
begin
	output_im_expected[28] = 1'bX;
end 
// expected output_im[ 27 ]
initial
begin
	output_im_expected[27] = 1'bX;
end 
// expected output_im[ 26 ]
initial
begin
	output_im_expected[26] = 1'bX;
end 
// expected output_im[ 25 ]
initial
begin
	output_im_expected[25] = 1'bX;
end 
// expected output_im[ 24 ]
initial
begin
	output_im_expected[24] = 1'bX;
end 
// expected output_im[ 23 ]
initial
begin
	output_im_expected[23] = 1'bX;
end 
// expected output_im[ 22 ]
initial
begin
	output_im_expected[22] = 1'bX;
end 
// expected output_im[ 21 ]
initial
begin
	output_im_expected[21] = 1'bX;
end 
// expected output_im[ 20 ]
initial
begin
	output_im_expected[20] = 1'bX;
end 
// expected output_im[ 19 ]
initial
begin
	output_im_expected[19] = 1'bX;
end 
// expected output_im[ 18 ]
initial
begin
	output_im_expected[18] = 1'bX;
end 
// expected output_im[ 17 ]
initial
begin
	output_im_expected[17] = 1'bX;
end 
// expected output_im[ 16 ]
initial
begin
	output_im_expected[16] = 1'bX;
end 
// expected output_im[ 15 ]
initial
begin
	output_im_expected[15] = 1'bX;
end 
// expected output_im[ 14 ]
initial
begin
	output_im_expected[14] = 1'bX;
end 
// expected output_im[ 13 ]
initial
begin
	output_im_expected[13] = 1'bX;
end 
// expected output_im[ 12 ]
initial
begin
	output_im_expected[12] = 1'bX;
end 
// expected output_im[ 11 ]
initial
begin
	output_im_expected[11] = 1'bX;
end 
// expected output_im[ 10 ]
initial
begin
	output_im_expected[10] = 1'bX;
end 
// expected output_im[ 9 ]
initial
begin
	output_im_expected[9] = 1'bX;
end 
// expected output_im[ 8 ]
initial
begin
	output_im_expected[8] = 1'bX;
end 
// expected output_im[ 7 ]
initial
begin
	output_im_expected[7] = 1'bX;
end 
// expected output_im[ 6 ]
initial
begin
	output_im_expected[6] = 1'bX;
end 
// expected output_im[ 5 ]
initial
begin
	output_im_expected[5] = 1'bX;
end 
// expected output_im[ 4 ]
initial
begin
	output_im_expected[4] = 1'bX;
end 
// expected output_im[ 3 ]
initial
begin
	output_im_expected[3] = 1'bX;
end 
// expected output_im[ 2 ]
initial
begin
	output_im_expected[2] = 1'bX;
end 
// expected output_im[ 1 ]
initial
begin
	output_im_expected[1] = 1'bX;
end 
// expected output_im[ 0 ]
initial
begin
	output_im_expected[0] = 1'bX;
end 
// expected output_re[ 87 ]
initial
begin
	output_re_expected[87] = 1'bX;
end 
// expected output_re[ 86 ]
initial
begin
	output_re_expected[86] = 1'bX;
end 
// expected output_re[ 85 ]
initial
begin
	output_re_expected[85] = 1'bX;
end 
// expected output_re[ 84 ]
initial
begin
	output_re_expected[84] = 1'bX;
end 
// expected output_re[ 83 ]
initial
begin
	output_re_expected[83] = 1'bX;
end 
// expected output_re[ 82 ]
initial
begin
	output_re_expected[82] = 1'bX;
end 
// expected output_re[ 81 ]
initial
begin
	output_re_expected[81] = 1'bX;
end 
// expected output_re[ 80 ]
initial
begin
	output_re_expected[80] = 1'bX;
end 
// expected output_re[ 79 ]
initial
begin
	output_re_expected[79] = 1'bX;
end 
// expected output_re[ 78 ]
initial
begin
	output_re_expected[78] = 1'bX;
end 
// expected output_re[ 77 ]
initial
begin
	output_re_expected[77] = 1'bX;
end 
// expected output_re[ 76 ]
initial
begin
	output_re_expected[76] = 1'bX;
end 
// expected output_re[ 75 ]
initial
begin
	output_re_expected[75] = 1'bX;
end 
// expected output_re[ 74 ]
initial
begin
	output_re_expected[74] = 1'bX;
end 
// expected output_re[ 73 ]
initial
begin
	output_re_expected[73] = 1'bX;
end 
// expected output_re[ 72 ]
initial
begin
	output_re_expected[72] = 1'bX;
end 
// expected output_re[ 71 ]
initial
begin
	output_re_expected[71] = 1'bX;
end 
// expected output_re[ 70 ]
initial
begin
	output_re_expected[70] = 1'bX;
end 
// expected output_re[ 69 ]
initial
begin
	output_re_expected[69] = 1'bX;
end 
// expected output_re[ 68 ]
initial
begin
	output_re_expected[68] = 1'bX;
end 
// expected output_re[ 67 ]
initial
begin
	output_re_expected[67] = 1'bX;
end 
// expected output_re[ 66 ]
initial
begin
	output_re_expected[66] = 1'bX;
end 
// expected output_re[ 65 ]
initial
begin
	output_re_expected[65] = 1'bX;
end 
// expected output_re[ 64 ]
initial
begin
	output_re_expected[64] = 1'bX;
end 
// expected output_re[ 63 ]
initial
begin
	output_re_expected[63] = 1'bX;
end 
// expected output_re[ 62 ]
initial
begin
	output_re_expected[62] = 1'bX;
end 
// expected output_re[ 61 ]
initial
begin
	output_re_expected[61] = 1'bX;
end 
// expected output_re[ 60 ]
initial
begin
	output_re_expected[60] = 1'bX;
end 
// expected output_re[ 59 ]
initial
begin
	output_re_expected[59] = 1'bX;
end 
// expected output_re[ 58 ]
initial
begin
	output_re_expected[58] = 1'bX;
end 
// expected output_re[ 57 ]
initial
begin
	output_re_expected[57] = 1'bX;
end 
// expected output_re[ 56 ]
initial
begin
	output_re_expected[56] = 1'bX;
end 
// expected output_re[ 55 ]
initial
begin
	output_re_expected[55] = 1'bX;
end 
// expected output_re[ 54 ]
initial
begin
	output_re_expected[54] = 1'bX;
end 
// expected output_re[ 53 ]
initial
begin
	output_re_expected[53] = 1'bX;
end 
// expected output_re[ 52 ]
initial
begin
	output_re_expected[52] = 1'bX;
end 
// expected output_re[ 51 ]
initial
begin
	output_re_expected[51] = 1'bX;
end 
// expected output_re[ 50 ]
initial
begin
	output_re_expected[50] = 1'bX;
end 
// expected output_re[ 49 ]
initial
begin
	output_re_expected[49] = 1'bX;
end 
// expected output_re[ 48 ]
initial
begin
	output_re_expected[48] = 1'bX;
end 
// expected output_re[ 47 ]
initial
begin
	output_re_expected[47] = 1'bX;
end 
// expected output_re[ 46 ]
initial
begin
	output_re_expected[46] = 1'bX;
end 
// expected output_re[ 45 ]
initial
begin
	output_re_expected[45] = 1'bX;
end 
// expected output_re[ 44 ]
initial
begin
	output_re_expected[44] = 1'bX;
end 
// expected output_re[ 43 ]
initial
begin
	output_re_expected[43] = 1'bX;
end 
// expected output_re[ 42 ]
initial
begin
	output_re_expected[42] = 1'bX;
end 
// expected output_re[ 41 ]
initial
begin
	output_re_expected[41] = 1'bX;
end 
// expected output_re[ 40 ]
initial
begin
	output_re_expected[40] = 1'bX;
end 
// expected output_re[ 39 ]
initial
begin
	output_re_expected[39] = 1'bX;
end 
// expected output_re[ 38 ]
initial
begin
	output_re_expected[38] = 1'bX;
end 
// expected output_re[ 37 ]
initial
begin
	output_re_expected[37] = 1'bX;
end 
// expected output_re[ 36 ]
initial
begin
	output_re_expected[36] = 1'bX;
end 
// expected output_re[ 35 ]
initial
begin
	output_re_expected[35] = 1'bX;
end 
// expected output_re[ 34 ]
initial
begin
	output_re_expected[34] = 1'bX;
end 
// expected output_re[ 33 ]
initial
begin
	output_re_expected[33] = 1'bX;
end 
// expected output_re[ 32 ]
initial
begin
	output_re_expected[32] = 1'bX;
end 
// expected output_re[ 31 ]
initial
begin
	output_re_expected[31] = 1'bX;
end 
// expected output_re[ 30 ]
initial
begin
	output_re_expected[30] = 1'bX;
end 
// expected output_re[ 29 ]
initial
begin
	output_re_expected[29] = 1'bX;
end 
// expected output_re[ 28 ]
initial
begin
	output_re_expected[28] = 1'bX;
end 
// expected output_re[ 27 ]
initial
begin
	output_re_expected[27] = 1'bX;
end 
// expected output_re[ 26 ]
initial
begin
	output_re_expected[26] = 1'bX;
end 
// expected output_re[ 25 ]
initial
begin
	output_re_expected[25] = 1'bX;
end 
// expected output_re[ 24 ]
initial
begin
	output_re_expected[24] = 1'bX;
end 
// expected output_re[ 23 ]
initial
begin
	output_re_expected[23] = 1'bX;
end 
// expected output_re[ 22 ]
initial
begin
	output_re_expected[22] = 1'bX;
end 
// expected output_re[ 21 ]
initial
begin
	output_re_expected[21] = 1'bX;
end 
// expected output_re[ 20 ]
initial
begin
	output_re_expected[20] = 1'bX;
end 
// expected output_re[ 19 ]
initial
begin
	output_re_expected[19] = 1'bX;
end 
// expected output_re[ 18 ]
initial
begin
	output_re_expected[18] = 1'bX;
end 
// expected output_re[ 17 ]
initial
begin
	output_re_expected[17] = 1'bX;
end 
// expected output_re[ 16 ]
initial
begin
	output_re_expected[16] = 1'bX;
end 
// expected output_re[ 15 ]
initial
begin
	output_re_expected[15] = 1'bX;
end 
// expected output_re[ 14 ]
initial
begin
	output_re_expected[14] = 1'bX;
end 
// expected output_re[ 13 ]
initial
begin
	output_re_expected[13] = 1'bX;
end 
// expected output_re[ 12 ]
initial
begin
	output_re_expected[12] = 1'bX;
end 
// expected output_re[ 11 ]
initial
begin
	output_re_expected[11] = 1'bX;
end 
// expected output_re[ 10 ]
initial
begin
	output_re_expected[10] = 1'bX;
end 
// expected output_re[ 9 ]
initial
begin
	output_re_expected[9] = 1'bX;
end 
// expected output_re[ 8 ]
initial
begin
	output_re_expected[8] = 1'bX;
end 
// expected output_re[ 7 ]
initial
begin
	output_re_expected[7] = 1'bX;
end 
// expected output_re[ 6 ]
initial
begin
	output_re_expected[6] = 1'bX;
end 
// expected output_re[ 5 ]
initial
begin
	output_re_expected[5] = 1'bX;
end 
// expected output_re[ 4 ]
initial
begin
	output_re_expected[4] = 1'bX;
end 
// expected output_re[ 3 ]
initial
begin
	output_re_expected[3] = 1'bX;
end 
// expected output_re[ 2 ]
initial
begin
	output_re_expected[2] = 1'bX;
end 
// expected output_re[ 1 ]
initial
begin
	output_re_expected[1] = 1'bX;
end 
// expected output_re[ 0 ]
initial
begin
	output_re_expected[0] = 1'bX;
end 
// generate trigger
always @(output_im_expected or output_im or output_re_expected or output_re)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected output_im = %b | expected output_re = %b | ",output_im_expected_prev,output_re_expected_prev);
	$display("| real output_im = %b | real output_re = %b | ",output_im_prev,output_re_prev);
`endif
	if (
		( output_im_expected_prev[0] !== 1'bx ) && ( output_im_prev[0] !== output_im_expected_prev[0] )
		&& ((output_im_expected_prev[0] !== last_output_im_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[0] = output_im_expected_prev[0];
	end
	if (
		( output_im_expected_prev[1] !== 1'bx ) && ( output_im_prev[1] !== output_im_expected_prev[1] )
		&& ((output_im_expected_prev[1] !== last_output_im_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[1] = output_im_expected_prev[1];
	end
	if (
		( output_im_expected_prev[2] !== 1'bx ) && ( output_im_prev[2] !== output_im_expected_prev[2] )
		&& ((output_im_expected_prev[2] !== last_output_im_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[2] = output_im_expected_prev[2];
	end
	if (
		( output_im_expected_prev[3] !== 1'bx ) && ( output_im_prev[3] !== output_im_expected_prev[3] )
		&& ((output_im_expected_prev[3] !== last_output_im_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[3] = output_im_expected_prev[3];
	end
	if (
		( output_im_expected_prev[4] !== 1'bx ) && ( output_im_prev[4] !== output_im_expected_prev[4] )
		&& ((output_im_expected_prev[4] !== last_output_im_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[4] = output_im_expected_prev[4];
	end
	if (
		( output_im_expected_prev[5] !== 1'bx ) && ( output_im_prev[5] !== output_im_expected_prev[5] )
		&& ((output_im_expected_prev[5] !== last_output_im_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[5] = output_im_expected_prev[5];
	end
	if (
		( output_im_expected_prev[6] !== 1'bx ) && ( output_im_prev[6] !== output_im_expected_prev[6] )
		&& ((output_im_expected_prev[6] !== last_output_im_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[6] = output_im_expected_prev[6];
	end
	if (
		( output_im_expected_prev[7] !== 1'bx ) && ( output_im_prev[7] !== output_im_expected_prev[7] )
		&& ((output_im_expected_prev[7] !== last_output_im_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[7] = output_im_expected_prev[7];
	end
	if (
		( output_im_expected_prev[8] !== 1'bx ) && ( output_im_prev[8] !== output_im_expected_prev[8] )
		&& ((output_im_expected_prev[8] !== last_output_im_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[8] = output_im_expected_prev[8];
	end
	if (
		( output_im_expected_prev[9] !== 1'bx ) && ( output_im_prev[9] !== output_im_expected_prev[9] )
		&& ((output_im_expected_prev[9] !== last_output_im_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[9] = output_im_expected_prev[9];
	end
	if (
		( output_im_expected_prev[10] !== 1'bx ) && ( output_im_prev[10] !== output_im_expected_prev[10] )
		&& ((output_im_expected_prev[10] !== last_output_im_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[10] = output_im_expected_prev[10];
	end
	if (
		( output_im_expected_prev[11] !== 1'bx ) && ( output_im_prev[11] !== output_im_expected_prev[11] )
		&& ((output_im_expected_prev[11] !== last_output_im_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[11] = output_im_expected_prev[11];
	end
	if (
		( output_im_expected_prev[12] !== 1'bx ) && ( output_im_prev[12] !== output_im_expected_prev[12] )
		&& ((output_im_expected_prev[12] !== last_output_im_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[12] = output_im_expected_prev[12];
	end
	if (
		( output_im_expected_prev[13] !== 1'bx ) && ( output_im_prev[13] !== output_im_expected_prev[13] )
		&& ((output_im_expected_prev[13] !== last_output_im_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[13] = output_im_expected_prev[13];
	end
	if (
		( output_im_expected_prev[14] !== 1'bx ) && ( output_im_prev[14] !== output_im_expected_prev[14] )
		&& ((output_im_expected_prev[14] !== last_output_im_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[14] = output_im_expected_prev[14];
	end
	if (
		( output_im_expected_prev[15] !== 1'bx ) && ( output_im_prev[15] !== output_im_expected_prev[15] )
		&& ((output_im_expected_prev[15] !== last_output_im_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[15] = output_im_expected_prev[15];
	end
	if (
		( output_im_expected_prev[16] !== 1'bx ) && ( output_im_prev[16] !== output_im_expected_prev[16] )
		&& ((output_im_expected_prev[16] !== last_output_im_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[16] = output_im_expected_prev[16];
	end
	if (
		( output_im_expected_prev[17] !== 1'bx ) && ( output_im_prev[17] !== output_im_expected_prev[17] )
		&& ((output_im_expected_prev[17] !== last_output_im_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[17] = output_im_expected_prev[17];
	end
	if (
		( output_im_expected_prev[18] !== 1'bx ) && ( output_im_prev[18] !== output_im_expected_prev[18] )
		&& ((output_im_expected_prev[18] !== last_output_im_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[18] = output_im_expected_prev[18];
	end
	if (
		( output_im_expected_prev[19] !== 1'bx ) && ( output_im_prev[19] !== output_im_expected_prev[19] )
		&& ((output_im_expected_prev[19] !== last_output_im_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[19] = output_im_expected_prev[19];
	end
	if (
		( output_im_expected_prev[20] !== 1'bx ) && ( output_im_prev[20] !== output_im_expected_prev[20] )
		&& ((output_im_expected_prev[20] !== last_output_im_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[20] = output_im_expected_prev[20];
	end
	if (
		( output_im_expected_prev[21] !== 1'bx ) && ( output_im_prev[21] !== output_im_expected_prev[21] )
		&& ((output_im_expected_prev[21] !== last_output_im_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[21] = output_im_expected_prev[21];
	end
	if (
		( output_im_expected_prev[22] !== 1'bx ) && ( output_im_prev[22] !== output_im_expected_prev[22] )
		&& ((output_im_expected_prev[22] !== last_output_im_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[22] = output_im_expected_prev[22];
	end
	if (
		( output_im_expected_prev[23] !== 1'bx ) && ( output_im_prev[23] !== output_im_expected_prev[23] )
		&& ((output_im_expected_prev[23] !== last_output_im_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[23] = output_im_expected_prev[23];
	end
	if (
		( output_im_expected_prev[24] !== 1'bx ) && ( output_im_prev[24] !== output_im_expected_prev[24] )
		&& ((output_im_expected_prev[24] !== last_output_im_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[24] = output_im_expected_prev[24];
	end
	if (
		( output_im_expected_prev[25] !== 1'bx ) && ( output_im_prev[25] !== output_im_expected_prev[25] )
		&& ((output_im_expected_prev[25] !== last_output_im_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[25] = output_im_expected_prev[25];
	end
	if (
		( output_im_expected_prev[26] !== 1'bx ) && ( output_im_prev[26] !== output_im_expected_prev[26] )
		&& ((output_im_expected_prev[26] !== last_output_im_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[26] = output_im_expected_prev[26];
	end
	if (
		( output_im_expected_prev[27] !== 1'bx ) && ( output_im_prev[27] !== output_im_expected_prev[27] )
		&& ((output_im_expected_prev[27] !== last_output_im_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[27] = output_im_expected_prev[27];
	end
	if (
		( output_im_expected_prev[28] !== 1'bx ) && ( output_im_prev[28] !== output_im_expected_prev[28] )
		&& ((output_im_expected_prev[28] !== last_output_im_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[28] = output_im_expected_prev[28];
	end
	if (
		( output_im_expected_prev[29] !== 1'bx ) && ( output_im_prev[29] !== output_im_expected_prev[29] )
		&& ((output_im_expected_prev[29] !== last_output_im_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[29] = output_im_expected_prev[29];
	end
	if (
		( output_im_expected_prev[30] !== 1'bx ) && ( output_im_prev[30] !== output_im_expected_prev[30] )
		&& ((output_im_expected_prev[30] !== last_output_im_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[30] = output_im_expected_prev[30];
	end
	if (
		( output_im_expected_prev[31] !== 1'bx ) && ( output_im_prev[31] !== output_im_expected_prev[31] )
		&& ((output_im_expected_prev[31] !== last_output_im_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[31] = output_im_expected_prev[31];
	end
	if (
		( output_im_expected_prev[32] !== 1'bx ) && ( output_im_prev[32] !== output_im_expected_prev[32] )
		&& ((output_im_expected_prev[32] !== last_output_im_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[32] = output_im_expected_prev[32];
	end
	if (
		( output_im_expected_prev[33] !== 1'bx ) && ( output_im_prev[33] !== output_im_expected_prev[33] )
		&& ((output_im_expected_prev[33] !== last_output_im_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[33] = output_im_expected_prev[33];
	end
	if (
		( output_im_expected_prev[34] !== 1'bx ) && ( output_im_prev[34] !== output_im_expected_prev[34] )
		&& ((output_im_expected_prev[34] !== last_output_im_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[34] = output_im_expected_prev[34];
	end
	if (
		( output_im_expected_prev[35] !== 1'bx ) && ( output_im_prev[35] !== output_im_expected_prev[35] )
		&& ((output_im_expected_prev[35] !== last_output_im_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[35] = output_im_expected_prev[35];
	end
	if (
		( output_im_expected_prev[36] !== 1'bx ) && ( output_im_prev[36] !== output_im_expected_prev[36] )
		&& ((output_im_expected_prev[36] !== last_output_im_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[36] = output_im_expected_prev[36];
	end
	if (
		( output_im_expected_prev[37] !== 1'bx ) && ( output_im_prev[37] !== output_im_expected_prev[37] )
		&& ((output_im_expected_prev[37] !== last_output_im_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[37] = output_im_expected_prev[37];
	end
	if (
		( output_im_expected_prev[38] !== 1'bx ) && ( output_im_prev[38] !== output_im_expected_prev[38] )
		&& ((output_im_expected_prev[38] !== last_output_im_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[38] = output_im_expected_prev[38];
	end
	if (
		( output_im_expected_prev[39] !== 1'bx ) && ( output_im_prev[39] !== output_im_expected_prev[39] )
		&& ((output_im_expected_prev[39] !== last_output_im_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[39] = output_im_expected_prev[39];
	end
	if (
		( output_im_expected_prev[40] !== 1'bx ) && ( output_im_prev[40] !== output_im_expected_prev[40] )
		&& ((output_im_expected_prev[40] !== last_output_im_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[40] = output_im_expected_prev[40];
	end
	if (
		( output_im_expected_prev[41] !== 1'bx ) && ( output_im_prev[41] !== output_im_expected_prev[41] )
		&& ((output_im_expected_prev[41] !== last_output_im_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[41] = output_im_expected_prev[41];
	end
	if (
		( output_im_expected_prev[42] !== 1'bx ) && ( output_im_prev[42] !== output_im_expected_prev[42] )
		&& ((output_im_expected_prev[42] !== last_output_im_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[42] = output_im_expected_prev[42];
	end
	if (
		( output_im_expected_prev[43] !== 1'bx ) && ( output_im_prev[43] !== output_im_expected_prev[43] )
		&& ((output_im_expected_prev[43] !== last_output_im_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[43] = output_im_expected_prev[43];
	end
	if (
		( output_im_expected_prev[44] !== 1'bx ) && ( output_im_prev[44] !== output_im_expected_prev[44] )
		&& ((output_im_expected_prev[44] !== last_output_im_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[44] = output_im_expected_prev[44];
	end
	if (
		( output_im_expected_prev[45] !== 1'bx ) && ( output_im_prev[45] !== output_im_expected_prev[45] )
		&& ((output_im_expected_prev[45] !== last_output_im_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[45] = output_im_expected_prev[45];
	end
	if (
		( output_im_expected_prev[46] !== 1'bx ) && ( output_im_prev[46] !== output_im_expected_prev[46] )
		&& ((output_im_expected_prev[46] !== last_output_im_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[46] = output_im_expected_prev[46];
	end
	if (
		( output_im_expected_prev[47] !== 1'bx ) && ( output_im_prev[47] !== output_im_expected_prev[47] )
		&& ((output_im_expected_prev[47] !== last_output_im_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[47] = output_im_expected_prev[47];
	end
	if (
		( output_im_expected_prev[48] !== 1'bx ) && ( output_im_prev[48] !== output_im_expected_prev[48] )
		&& ((output_im_expected_prev[48] !== last_output_im_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[48] = output_im_expected_prev[48];
	end
	if (
		( output_im_expected_prev[49] !== 1'bx ) && ( output_im_prev[49] !== output_im_expected_prev[49] )
		&& ((output_im_expected_prev[49] !== last_output_im_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[49] = output_im_expected_prev[49];
	end
	if (
		( output_im_expected_prev[50] !== 1'bx ) && ( output_im_prev[50] !== output_im_expected_prev[50] )
		&& ((output_im_expected_prev[50] !== last_output_im_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[50] = output_im_expected_prev[50];
	end
	if (
		( output_im_expected_prev[51] !== 1'bx ) && ( output_im_prev[51] !== output_im_expected_prev[51] )
		&& ((output_im_expected_prev[51] !== last_output_im_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[51] = output_im_expected_prev[51];
	end
	if (
		( output_im_expected_prev[52] !== 1'bx ) && ( output_im_prev[52] !== output_im_expected_prev[52] )
		&& ((output_im_expected_prev[52] !== last_output_im_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[52] = output_im_expected_prev[52];
	end
	if (
		( output_im_expected_prev[53] !== 1'bx ) && ( output_im_prev[53] !== output_im_expected_prev[53] )
		&& ((output_im_expected_prev[53] !== last_output_im_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[53] = output_im_expected_prev[53];
	end
	if (
		( output_im_expected_prev[54] !== 1'bx ) && ( output_im_prev[54] !== output_im_expected_prev[54] )
		&& ((output_im_expected_prev[54] !== last_output_im_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[54] = output_im_expected_prev[54];
	end
	if (
		( output_im_expected_prev[55] !== 1'bx ) && ( output_im_prev[55] !== output_im_expected_prev[55] )
		&& ((output_im_expected_prev[55] !== last_output_im_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[55] = output_im_expected_prev[55];
	end
	if (
		( output_im_expected_prev[56] !== 1'bx ) && ( output_im_prev[56] !== output_im_expected_prev[56] )
		&& ((output_im_expected_prev[56] !== last_output_im_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[56] = output_im_expected_prev[56];
	end
	if (
		( output_im_expected_prev[57] !== 1'bx ) && ( output_im_prev[57] !== output_im_expected_prev[57] )
		&& ((output_im_expected_prev[57] !== last_output_im_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[57] = output_im_expected_prev[57];
	end
	if (
		( output_im_expected_prev[58] !== 1'bx ) && ( output_im_prev[58] !== output_im_expected_prev[58] )
		&& ((output_im_expected_prev[58] !== last_output_im_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[58] = output_im_expected_prev[58];
	end
	if (
		( output_im_expected_prev[59] !== 1'bx ) && ( output_im_prev[59] !== output_im_expected_prev[59] )
		&& ((output_im_expected_prev[59] !== last_output_im_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[59] = output_im_expected_prev[59];
	end
	if (
		( output_im_expected_prev[60] !== 1'bx ) && ( output_im_prev[60] !== output_im_expected_prev[60] )
		&& ((output_im_expected_prev[60] !== last_output_im_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[60] = output_im_expected_prev[60];
	end
	if (
		( output_im_expected_prev[61] !== 1'bx ) && ( output_im_prev[61] !== output_im_expected_prev[61] )
		&& ((output_im_expected_prev[61] !== last_output_im_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[61] = output_im_expected_prev[61];
	end
	if (
		( output_im_expected_prev[62] !== 1'bx ) && ( output_im_prev[62] !== output_im_expected_prev[62] )
		&& ((output_im_expected_prev[62] !== last_output_im_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[62] = output_im_expected_prev[62];
	end
	if (
		( output_im_expected_prev[63] !== 1'bx ) && ( output_im_prev[63] !== output_im_expected_prev[63] )
		&& ((output_im_expected_prev[63] !== last_output_im_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[63] = output_im_expected_prev[63];
	end
	if (
		( output_im_expected_prev[64] !== 1'bx ) && ( output_im_prev[64] !== output_im_expected_prev[64] )
		&& ((output_im_expected_prev[64] !== last_output_im_exp[64]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[64] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[64] = output_im_expected_prev[64];
	end
	if (
		( output_im_expected_prev[65] !== 1'bx ) && ( output_im_prev[65] !== output_im_expected_prev[65] )
		&& ((output_im_expected_prev[65] !== last_output_im_exp[65]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[65] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[65] = output_im_expected_prev[65];
	end
	if (
		( output_im_expected_prev[66] !== 1'bx ) && ( output_im_prev[66] !== output_im_expected_prev[66] )
		&& ((output_im_expected_prev[66] !== last_output_im_exp[66]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[66] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[66] = output_im_expected_prev[66];
	end
	if (
		( output_im_expected_prev[67] !== 1'bx ) && ( output_im_prev[67] !== output_im_expected_prev[67] )
		&& ((output_im_expected_prev[67] !== last_output_im_exp[67]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[67] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[67] = output_im_expected_prev[67];
	end
	if (
		( output_im_expected_prev[68] !== 1'bx ) && ( output_im_prev[68] !== output_im_expected_prev[68] )
		&& ((output_im_expected_prev[68] !== last_output_im_exp[68]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[68] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[68] = output_im_expected_prev[68];
	end
	if (
		( output_im_expected_prev[69] !== 1'bx ) && ( output_im_prev[69] !== output_im_expected_prev[69] )
		&& ((output_im_expected_prev[69] !== last_output_im_exp[69]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[69] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[69] = output_im_expected_prev[69];
	end
	if (
		( output_im_expected_prev[70] !== 1'bx ) && ( output_im_prev[70] !== output_im_expected_prev[70] )
		&& ((output_im_expected_prev[70] !== last_output_im_exp[70]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[70] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[70] = output_im_expected_prev[70];
	end
	if (
		( output_im_expected_prev[71] !== 1'bx ) && ( output_im_prev[71] !== output_im_expected_prev[71] )
		&& ((output_im_expected_prev[71] !== last_output_im_exp[71]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[71] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[71] = output_im_expected_prev[71];
	end
	if (
		( output_im_expected_prev[72] !== 1'bx ) && ( output_im_prev[72] !== output_im_expected_prev[72] )
		&& ((output_im_expected_prev[72] !== last_output_im_exp[72]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[72] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[72] = output_im_expected_prev[72];
	end
	if (
		( output_im_expected_prev[73] !== 1'bx ) && ( output_im_prev[73] !== output_im_expected_prev[73] )
		&& ((output_im_expected_prev[73] !== last_output_im_exp[73]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[73] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[73] = output_im_expected_prev[73];
	end
	if (
		( output_im_expected_prev[74] !== 1'bx ) && ( output_im_prev[74] !== output_im_expected_prev[74] )
		&& ((output_im_expected_prev[74] !== last_output_im_exp[74]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[74] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[74] = output_im_expected_prev[74];
	end
	if (
		( output_im_expected_prev[75] !== 1'bx ) && ( output_im_prev[75] !== output_im_expected_prev[75] )
		&& ((output_im_expected_prev[75] !== last_output_im_exp[75]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[75] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[75] = output_im_expected_prev[75];
	end
	if (
		( output_im_expected_prev[76] !== 1'bx ) && ( output_im_prev[76] !== output_im_expected_prev[76] )
		&& ((output_im_expected_prev[76] !== last_output_im_exp[76]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[76] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[76] = output_im_expected_prev[76];
	end
	if (
		( output_im_expected_prev[77] !== 1'bx ) && ( output_im_prev[77] !== output_im_expected_prev[77] )
		&& ((output_im_expected_prev[77] !== last_output_im_exp[77]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[77] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[77] = output_im_expected_prev[77];
	end
	if (
		( output_im_expected_prev[78] !== 1'bx ) && ( output_im_prev[78] !== output_im_expected_prev[78] )
		&& ((output_im_expected_prev[78] !== last_output_im_exp[78]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[78] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[78] = output_im_expected_prev[78];
	end
	if (
		( output_im_expected_prev[79] !== 1'bx ) && ( output_im_prev[79] !== output_im_expected_prev[79] )
		&& ((output_im_expected_prev[79] !== last_output_im_exp[79]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[79] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[79] = output_im_expected_prev[79];
	end
	if (
		( output_im_expected_prev[80] !== 1'bx ) && ( output_im_prev[80] !== output_im_expected_prev[80] )
		&& ((output_im_expected_prev[80] !== last_output_im_exp[80]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[80] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[80] = output_im_expected_prev[80];
	end
	if (
		( output_im_expected_prev[81] !== 1'bx ) && ( output_im_prev[81] !== output_im_expected_prev[81] )
		&& ((output_im_expected_prev[81] !== last_output_im_exp[81]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[81] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[81] = output_im_expected_prev[81];
	end
	if (
		( output_im_expected_prev[82] !== 1'bx ) && ( output_im_prev[82] !== output_im_expected_prev[82] )
		&& ((output_im_expected_prev[82] !== last_output_im_exp[82]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[82] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[82] = output_im_expected_prev[82];
	end
	if (
		( output_im_expected_prev[83] !== 1'bx ) && ( output_im_prev[83] !== output_im_expected_prev[83] )
		&& ((output_im_expected_prev[83] !== last_output_im_exp[83]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[83] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[83] = output_im_expected_prev[83];
	end
	if (
		( output_im_expected_prev[84] !== 1'bx ) && ( output_im_prev[84] !== output_im_expected_prev[84] )
		&& ((output_im_expected_prev[84] !== last_output_im_exp[84]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[84] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[84] = output_im_expected_prev[84];
	end
	if (
		( output_im_expected_prev[85] !== 1'bx ) && ( output_im_prev[85] !== output_im_expected_prev[85] )
		&& ((output_im_expected_prev[85] !== last_output_im_exp[85]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[85] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[85] = output_im_expected_prev[85];
	end
	if (
		( output_im_expected_prev[86] !== 1'bx ) && ( output_im_prev[86] !== output_im_expected_prev[86] )
		&& ((output_im_expected_prev[86] !== last_output_im_exp[86]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[86] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[86] = output_im_expected_prev[86];
	end
	if (
		( output_im_expected_prev[87] !== 1'bx ) && ( output_im_prev[87] !== output_im_expected_prev[87] )
		&& ((output_im_expected_prev[87] !== last_output_im_exp[87]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_im[87] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_im_expected_prev);
		$display ("     Real value = %b", output_im_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_im_exp[87] = output_im_expected_prev[87];
	end
	if (
		( output_re_expected_prev[0] !== 1'bx ) && ( output_re_prev[0] !== output_re_expected_prev[0] )
		&& ((output_re_expected_prev[0] !== last_output_re_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[0] = output_re_expected_prev[0];
	end
	if (
		( output_re_expected_prev[1] !== 1'bx ) && ( output_re_prev[1] !== output_re_expected_prev[1] )
		&& ((output_re_expected_prev[1] !== last_output_re_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[1] = output_re_expected_prev[1];
	end
	if (
		( output_re_expected_prev[2] !== 1'bx ) && ( output_re_prev[2] !== output_re_expected_prev[2] )
		&& ((output_re_expected_prev[2] !== last_output_re_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[2] = output_re_expected_prev[2];
	end
	if (
		( output_re_expected_prev[3] !== 1'bx ) && ( output_re_prev[3] !== output_re_expected_prev[3] )
		&& ((output_re_expected_prev[3] !== last_output_re_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[3] = output_re_expected_prev[3];
	end
	if (
		( output_re_expected_prev[4] !== 1'bx ) && ( output_re_prev[4] !== output_re_expected_prev[4] )
		&& ((output_re_expected_prev[4] !== last_output_re_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[4] = output_re_expected_prev[4];
	end
	if (
		( output_re_expected_prev[5] !== 1'bx ) && ( output_re_prev[5] !== output_re_expected_prev[5] )
		&& ((output_re_expected_prev[5] !== last_output_re_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[5] = output_re_expected_prev[5];
	end
	if (
		( output_re_expected_prev[6] !== 1'bx ) && ( output_re_prev[6] !== output_re_expected_prev[6] )
		&& ((output_re_expected_prev[6] !== last_output_re_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[6] = output_re_expected_prev[6];
	end
	if (
		( output_re_expected_prev[7] !== 1'bx ) && ( output_re_prev[7] !== output_re_expected_prev[7] )
		&& ((output_re_expected_prev[7] !== last_output_re_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[7] = output_re_expected_prev[7];
	end
	if (
		( output_re_expected_prev[8] !== 1'bx ) && ( output_re_prev[8] !== output_re_expected_prev[8] )
		&& ((output_re_expected_prev[8] !== last_output_re_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[8] = output_re_expected_prev[8];
	end
	if (
		( output_re_expected_prev[9] !== 1'bx ) && ( output_re_prev[9] !== output_re_expected_prev[9] )
		&& ((output_re_expected_prev[9] !== last_output_re_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[9] = output_re_expected_prev[9];
	end
	if (
		( output_re_expected_prev[10] !== 1'bx ) && ( output_re_prev[10] !== output_re_expected_prev[10] )
		&& ((output_re_expected_prev[10] !== last_output_re_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[10] = output_re_expected_prev[10];
	end
	if (
		( output_re_expected_prev[11] !== 1'bx ) && ( output_re_prev[11] !== output_re_expected_prev[11] )
		&& ((output_re_expected_prev[11] !== last_output_re_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[11] = output_re_expected_prev[11];
	end
	if (
		( output_re_expected_prev[12] !== 1'bx ) && ( output_re_prev[12] !== output_re_expected_prev[12] )
		&& ((output_re_expected_prev[12] !== last_output_re_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[12] = output_re_expected_prev[12];
	end
	if (
		( output_re_expected_prev[13] !== 1'bx ) && ( output_re_prev[13] !== output_re_expected_prev[13] )
		&& ((output_re_expected_prev[13] !== last_output_re_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[13] = output_re_expected_prev[13];
	end
	if (
		( output_re_expected_prev[14] !== 1'bx ) && ( output_re_prev[14] !== output_re_expected_prev[14] )
		&& ((output_re_expected_prev[14] !== last_output_re_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[14] = output_re_expected_prev[14];
	end
	if (
		( output_re_expected_prev[15] !== 1'bx ) && ( output_re_prev[15] !== output_re_expected_prev[15] )
		&& ((output_re_expected_prev[15] !== last_output_re_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[15] = output_re_expected_prev[15];
	end
	if (
		( output_re_expected_prev[16] !== 1'bx ) && ( output_re_prev[16] !== output_re_expected_prev[16] )
		&& ((output_re_expected_prev[16] !== last_output_re_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[16] = output_re_expected_prev[16];
	end
	if (
		( output_re_expected_prev[17] !== 1'bx ) && ( output_re_prev[17] !== output_re_expected_prev[17] )
		&& ((output_re_expected_prev[17] !== last_output_re_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[17] = output_re_expected_prev[17];
	end
	if (
		( output_re_expected_prev[18] !== 1'bx ) && ( output_re_prev[18] !== output_re_expected_prev[18] )
		&& ((output_re_expected_prev[18] !== last_output_re_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[18] = output_re_expected_prev[18];
	end
	if (
		( output_re_expected_prev[19] !== 1'bx ) && ( output_re_prev[19] !== output_re_expected_prev[19] )
		&& ((output_re_expected_prev[19] !== last_output_re_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[19] = output_re_expected_prev[19];
	end
	if (
		( output_re_expected_prev[20] !== 1'bx ) && ( output_re_prev[20] !== output_re_expected_prev[20] )
		&& ((output_re_expected_prev[20] !== last_output_re_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[20] = output_re_expected_prev[20];
	end
	if (
		( output_re_expected_prev[21] !== 1'bx ) && ( output_re_prev[21] !== output_re_expected_prev[21] )
		&& ((output_re_expected_prev[21] !== last_output_re_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[21] = output_re_expected_prev[21];
	end
	if (
		( output_re_expected_prev[22] !== 1'bx ) && ( output_re_prev[22] !== output_re_expected_prev[22] )
		&& ((output_re_expected_prev[22] !== last_output_re_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[22] = output_re_expected_prev[22];
	end
	if (
		( output_re_expected_prev[23] !== 1'bx ) && ( output_re_prev[23] !== output_re_expected_prev[23] )
		&& ((output_re_expected_prev[23] !== last_output_re_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[23] = output_re_expected_prev[23];
	end
	if (
		( output_re_expected_prev[24] !== 1'bx ) && ( output_re_prev[24] !== output_re_expected_prev[24] )
		&& ((output_re_expected_prev[24] !== last_output_re_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[24] = output_re_expected_prev[24];
	end
	if (
		( output_re_expected_prev[25] !== 1'bx ) && ( output_re_prev[25] !== output_re_expected_prev[25] )
		&& ((output_re_expected_prev[25] !== last_output_re_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[25] = output_re_expected_prev[25];
	end
	if (
		( output_re_expected_prev[26] !== 1'bx ) && ( output_re_prev[26] !== output_re_expected_prev[26] )
		&& ((output_re_expected_prev[26] !== last_output_re_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[26] = output_re_expected_prev[26];
	end
	if (
		( output_re_expected_prev[27] !== 1'bx ) && ( output_re_prev[27] !== output_re_expected_prev[27] )
		&& ((output_re_expected_prev[27] !== last_output_re_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[27] = output_re_expected_prev[27];
	end
	if (
		( output_re_expected_prev[28] !== 1'bx ) && ( output_re_prev[28] !== output_re_expected_prev[28] )
		&& ((output_re_expected_prev[28] !== last_output_re_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[28] = output_re_expected_prev[28];
	end
	if (
		( output_re_expected_prev[29] !== 1'bx ) && ( output_re_prev[29] !== output_re_expected_prev[29] )
		&& ((output_re_expected_prev[29] !== last_output_re_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[29] = output_re_expected_prev[29];
	end
	if (
		( output_re_expected_prev[30] !== 1'bx ) && ( output_re_prev[30] !== output_re_expected_prev[30] )
		&& ((output_re_expected_prev[30] !== last_output_re_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[30] = output_re_expected_prev[30];
	end
	if (
		( output_re_expected_prev[31] !== 1'bx ) && ( output_re_prev[31] !== output_re_expected_prev[31] )
		&& ((output_re_expected_prev[31] !== last_output_re_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[31] = output_re_expected_prev[31];
	end
	if (
		( output_re_expected_prev[32] !== 1'bx ) && ( output_re_prev[32] !== output_re_expected_prev[32] )
		&& ((output_re_expected_prev[32] !== last_output_re_exp[32]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[32] = output_re_expected_prev[32];
	end
	if (
		( output_re_expected_prev[33] !== 1'bx ) && ( output_re_prev[33] !== output_re_expected_prev[33] )
		&& ((output_re_expected_prev[33] !== last_output_re_exp[33]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[33] = output_re_expected_prev[33];
	end
	if (
		( output_re_expected_prev[34] !== 1'bx ) && ( output_re_prev[34] !== output_re_expected_prev[34] )
		&& ((output_re_expected_prev[34] !== last_output_re_exp[34]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[34] = output_re_expected_prev[34];
	end
	if (
		( output_re_expected_prev[35] !== 1'bx ) && ( output_re_prev[35] !== output_re_expected_prev[35] )
		&& ((output_re_expected_prev[35] !== last_output_re_exp[35]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[35] = output_re_expected_prev[35];
	end
	if (
		( output_re_expected_prev[36] !== 1'bx ) && ( output_re_prev[36] !== output_re_expected_prev[36] )
		&& ((output_re_expected_prev[36] !== last_output_re_exp[36]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[36] = output_re_expected_prev[36];
	end
	if (
		( output_re_expected_prev[37] !== 1'bx ) && ( output_re_prev[37] !== output_re_expected_prev[37] )
		&& ((output_re_expected_prev[37] !== last_output_re_exp[37]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[37] = output_re_expected_prev[37];
	end
	if (
		( output_re_expected_prev[38] !== 1'bx ) && ( output_re_prev[38] !== output_re_expected_prev[38] )
		&& ((output_re_expected_prev[38] !== last_output_re_exp[38]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[38] = output_re_expected_prev[38];
	end
	if (
		( output_re_expected_prev[39] !== 1'bx ) && ( output_re_prev[39] !== output_re_expected_prev[39] )
		&& ((output_re_expected_prev[39] !== last_output_re_exp[39]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[39] = output_re_expected_prev[39];
	end
	if (
		( output_re_expected_prev[40] !== 1'bx ) && ( output_re_prev[40] !== output_re_expected_prev[40] )
		&& ((output_re_expected_prev[40] !== last_output_re_exp[40]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[40] = output_re_expected_prev[40];
	end
	if (
		( output_re_expected_prev[41] !== 1'bx ) && ( output_re_prev[41] !== output_re_expected_prev[41] )
		&& ((output_re_expected_prev[41] !== last_output_re_exp[41]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[41] = output_re_expected_prev[41];
	end
	if (
		( output_re_expected_prev[42] !== 1'bx ) && ( output_re_prev[42] !== output_re_expected_prev[42] )
		&& ((output_re_expected_prev[42] !== last_output_re_exp[42]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[42] = output_re_expected_prev[42];
	end
	if (
		( output_re_expected_prev[43] !== 1'bx ) && ( output_re_prev[43] !== output_re_expected_prev[43] )
		&& ((output_re_expected_prev[43] !== last_output_re_exp[43]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[43] = output_re_expected_prev[43];
	end
	if (
		( output_re_expected_prev[44] !== 1'bx ) && ( output_re_prev[44] !== output_re_expected_prev[44] )
		&& ((output_re_expected_prev[44] !== last_output_re_exp[44]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[44] = output_re_expected_prev[44];
	end
	if (
		( output_re_expected_prev[45] !== 1'bx ) && ( output_re_prev[45] !== output_re_expected_prev[45] )
		&& ((output_re_expected_prev[45] !== last_output_re_exp[45]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[45] = output_re_expected_prev[45];
	end
	if (
		( output_re_expected_prev[46] !== 1'bx ) && ( output_re_prev[46] !== output_re_expected_prev[46] )
		&& ((output_re_expected_prev[46] !== last_output_re_exp[46]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[46] = output_re_expected_prev[46];
	end
	if (
		( output_re_expected_prev[47] !== 1'bx ) && ( output_re_prev[47] !== output_re_expected_prev[47] )
		&& ((output_re_expected_prev[47] !== last_output_re_exp[47]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[47] = output_re_expected_prev[47];
	end
	if (
		( output_re_expected_prev[48] !== 1'bx ) && ( output_re_prev[48] !== output_re_expected_prev[48] )
		&& ((output_re_expected_prev[48] !== last_output_re_exp[48]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[48] = output_re_expected_prev[48];
	end
	if (
		( output_re_expected_prev[49] !== 1'bx ) && ( output_re_prev[49] !== output_re_expected_prev[49] )
		&& ((output_re_expected_prev[49] !== last_output_re_exp[49]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[49] = output_re_expected_prev[49];
	end
	if (
		( output_re_expected_prev[50] !== 1'bx ) && ( output_re_prev[50] !== output_re_expected_prev[50] )
		&& ((output_re_expected_prev[50] !== last_output_re_exp[50]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[50] = output_re_expected_prev[50];
	end
	if (
		( output_re_expected_prev[51] !== 1'bx ) && ( output_re_prev[51] !== output_re_expected_prev[51] )
		&& ((output_re_expected_prev[51] !== last_output_re_exp[51]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[51] = output_re_expected_prev[51];
	end
	if (
		( output_re_expected_prev[52] !== 1'bx ) && ( output_re_prev[52] !== output_re_expected_prev[52] )
		&& ((output_re_expected_prev[52] !== last_output_re_exp[52]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[52] = output_re_expected_prev[52];
	end
	if (
		( output_re_expected_prev[53] !== 1'bx ) && ( output_re_prev[53] !== output_re_expected_prev[53] )
		&& ((output_re_expected_prev[53] !== last_output_re_exp[53]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[53] = output_re_expected_prev[53];
	end
	if (
		( output_re_expected_prev[54] !== 1'bx ) && ( output_re_prev[54] !== output_re_expected_prev[54] )
		&& ((output_re_expected_prev[54] !== last_output_re_exp[54]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[54] = output_re_expected_prev[54];
	end
	if (
		( output_re_expected_prev[55] !== 1'bx ) && ( output_re_prev[55] !== output_re_expected_prev[55] )
		&& ((output_re_expected_prev[55] !== last_output_re_exp[55]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[55] = output_re_expected_prev[55];
	end
	if (
		( output_re_expected_prev[56] !== 1'bx ) && ( output_re_prev[56] !== output_re_expected_prev[56] )
		&& ((output_re_expected_prev[56] !== last_output_re_exp[56]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[56] = output_re_expected_prev[56];
	end
	if (
		( output_re_expected_prev[57] !== 1'bx ) && ( output_re_prev[57] !== output_re_expected_prev[57] )
		&& ((output_re_expected_prev[57] !== last_output_re_exp[57]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[57] = output_re_expected_prev[57];
	end
	if (
		( output_re_expected_prev[58] !== 1'bx ) && ( output_re_prev[58] !== output_re_expected_prev[58] )
		&& ((output_re_expected_prev[58] !== last_output_re_exp[58]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[58] = output_re_expected_prev[58];
	end
	if (
		( output_re_expected_prev[59] !== 1'bx ) && ( output_re_prev[59] !== output_re_expected_prev[59] )
		&& ((output_re_expected_prev[59] !== last_output_re_exp[59]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[59] = output_re_expected_prev[59];
	end
	if (
		( output_re_expected_prev[60] !== 1'bx ) && ( output_re_prev[60] !== output_re_expected_prev[60] )
		&& ((output_re_expected_prev[60] !== last_output_re_exp[60]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[60] = output_re_expected_prev[60];
	end
	if (
		( output_re_expected_prev[61] !== 1'bx ) && ( output_re_prev[61] !== output_re_expected_prev[61] )
		&& ((output_re_expected_prev[61] !== last_output_re_exp[61]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[61] = output_re_expected_prev[61];
	end
	if (
		( output_re_expected_prev[62] !== 1'bx ) && ( output_re_prev[62] !== output_re_expected_prev[62] )
		&& ((output_re_expected_prev[62] !== last_output_re_exp[62]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[62] = output_re_expected_prev[62];
	end
	if (
		( output_re_expected_prev[63] !== 1'bx ) && ( output_re_prev[63] !== output_re_expected_prev[63] )
		&& ((output_re_expected_prev[63] !== last_output_re_exp[63]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[63] = output_re_expected_prev[63];
	end
	if (
		( output_re_expected_prev[64] !== 1'bx ) && ( output_re_prev[64] !== output_re_expected_prev[64] )
		&& ((output_re_expected_prev[64] !== last_output_re_exp[64]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[64] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[64] = output_re_expected_prev[64];
	end
	if (
		( output_re_expected_prev[65] !== 1'bx ) && ( output_re_prev[65] !== output_re_expected_prev[65] )
		&& ((output_re_expected_prev[65] !== last_output_re_exp[65]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[65] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[65] = output_re_expected_prev[65];
	end
	if (
		( output_re_expected_prev[66] !== 1'bx ) && ( output_re_prev[66] !== output_re_expected_prev[66] )
		&& ((output_re_expected_prev[66] !== last_output_re_exp[66]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[66] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[66] = output_re_expected_prev[66];
	end
	if (
		( output_re_expected_prev[67] !== 1'bx ) && ( output_re_prev[67] !== output_re_expected_prev[67] )
		&& ((output_re_expected_prev[67] !== last_output_re_exp[67]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[67] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[67] = output_re_expected_prev[67];
	end
	if (
		( output_re_expected_prev[68] !== 1'bx ) && ( output_re_prev[68] !== output_re_expected_prev[68] )
		&& ((output_re_expected_prev[68] !== last_output_re_exp[68]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[68] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[68] = output_re_expected_prev[68];
	end
	if (
		( output_re_expected_prev[69] !== 1'bx ) && ( output_re_prev[69] !== output_re_expected_prev[69] )
		&& ((output_re_expected_prev[69] !== last_output_re_exp[69]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[69] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[69] = output_re_expected_prev[69];
	end
	if (
		( output_re_expected_prev[70] !== 1'bx ) && ( output_re_prev[70] !== output_re_expected_prev[70] )
		&& ((output_re_expected_prev[70] !== last_output_re_exp[70]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[70] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[70] = output_re_expected_prev[70];
	end
	if (
		( output_re_expected_prev[71] !== 1'bx ) && ( output_re_prev[71] !== output_re_expected_prev[71] )
		&& ((output_re_expected_prev[71] !== last_output_re_exp[71]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[71] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[71] = output_re_expected_prev[71];
	end
	if (
		( output_re_expected_prev[72] !== 1'bx ) && ( output_re_prev[72] !== output_re_expected_prev[72] )
		&& ((output_re_expected_prev[72] !== last_output_re_exp[72]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[72] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[72] = output_re_expected_prev[72];
	end
	if (
		( output_re_expected_prev[73] !== 1'bx ) && ( output_re_prev[73] !== output_re_expected_prev[73] )
		&& ((output_re_expected_prev[73] !== last_output_re_exp[73]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[73] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[73] = output_re_expected_prev[73];
	end
	if (
		( output_re_expected_prev[74] !== 1'bx ) && ( output_re_prev[74] !== output_re_expected_prev[74] )
		&& ((output_re_expected_prev[74] !== last_output_re_exp[74]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[74] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[74] = output_re_expected_prev[74];
	end
	if (
		( output_re_expected_prev[75] !== 1'bx ) && ( output_re_prev[75] !== output_re_expected_prev[75] )
		&& ((output_re_expected_prev[75] !== last_output_re_exp[75]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[75] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[75] = output_re_expected_prev[75];
	end
	if (
		( output_re_expected_prev[76] !== 1'bx ) && ( output_re_prev[76] !== output_re_expected_prev[76] )
		&& ((output_re_expected_prev[76] !== last_output_re_exp[76]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[76] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[76] = output_re_expected_prev[76];
	end
	if (
		( output_re_expected_prev[77] !== 1'bx ) && ( output_re_prev[77] !== output_re_expected_prev[77] )
		&& ((output_re_expected_prev[77] !== last_output_re_exp[77]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[77] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[77] = output_re_expected_prev[77];
	end
	if (
		( output_re_expected_prev[78] !== 1'bx ) && ( output_re_prev[78] !== output_re_expected_prev[78] )
		&& ((output_re_expected_prev[78] !== last_output_re_exp[78]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[78] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[78] = output_re_expected_prev[78];
	end
	if (
		( output_re_expected_prev[79] !== 1'bx ) && ( output_re_prev[79] !== output_re_expected_prev[79] )
		&& ((output_re_expected_prev[79] !== last_output_re_exp[79]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[79] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[79] = output_re_expected_prev[79];
	end
	if (
		( output_re_expected_prev[80] !== 1'bx ) && ( output_re_prev[80] !== output_re_expected_prev[80] )
		&& ((output_re_expected_prev[80] !== last_output_re_exp[80]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[80] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[80] = output_re_expected_prev[80];
	end
	if (
		( output_re_expected_prev[81] !== 1'bx ) && ( output_re_prev[81] !== output_re_expected_prev[81] )
		&& ((output_re_expected_prev[81] !== last_output_re_exp[81]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[81] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[81] = output_re_expected_prev[81];
	end
	if (
		( output_re_expected_prev[82] !== 1'bx ) && ( output_re_prev[82] !== output_re_expected_prev[82] )
		&& ((output_re_expected_prev[82] !== last_output_re_exp[82]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[82] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[82] = output_re_expected_prev[82];
	end
	if (
		( output_re_expected_prev[83] !== 1'bx ) && ( output_re_prev[83] !== output_re_expected_prev[83] )
		&& ((output_re_expected_prev[83] !== last_output_re_exp[83]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[83] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[83] = output_re_expected_prev[83];
	end
	if (
		( output_re_expected_prev[84] !== 1'bx ) && ( output_re_prev[84] !== output_re_expected_prev[84] )
		&& ((output_re_expected_prev[84] !== last_output_re_exp[84]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[84] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[84] = output_re_expected_prev[84];
	end
	if (
		( output_re_expected_prev[85] !== 1'bx ) && ( output_re_prev[85] !== output_re_expected_prev[85] )
		&& ((output_re_expected_prev[85] !== last_output_re_exp[85]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[85] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[85] = output_re_expected_prev[85];
	end
	if (
		( output_re_expected_prev[86] !== 1'bx ) && ( output_re_prev[86] !== output_re_expected_prev[86] )
		&& ((output_re_expected_prev[86] !== last_output_re_exp[86]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[86] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[86] = output_re_expected_prev[86];
	end
	if (
		( output_re_expected_prev[87] !== 1'bx ) && ( output_re_prev[87] !== output_re_expected_prev[87] )
		&& ((output_re_expected_prev[87] !== last_output_re_exp[87]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_re[87] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_re_expected_prev);
		$display ("     Real value = %b", output_re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_re_exp[87] = output_re_expected_prev[87];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FFT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [63:0] input_im;
reg [63:0] input_re;
// wires                                               
wire [87:0] output_im;
wire [87:0] output_re;

wire sampler;                             

// assign statements (if any)                          
FFT i1 (
// port map - connection between master ports and signals/registers   
	.input_im(input_im),
	.input_re(input_re),
	.output_im(output_im),
	.output_re(output_re)
);
// input_im[ 63 ]
initial
begin
	input_im[63] = 1'b0;
end 
// input_im[ 62 ]
initial
begin
	input_im[62] = 1'b0;
end 
// input_im[ 61 ]
initial
begin
	input_im[61] = 1'b0;
end 
// input_im[ 60 ]
initial
begin
	input_im[60] = 1'b0;
end 
// input_im[ 59 ]
initial
begin
	input_im[59] = 1'b0;
end 
// input_im[ 58 ]
initial
begin
	input_im[58] = 1'b0;
end 
// input_im[ 57 ]
initial
begin
	input_im[57] = 1'b0;
end 
// input_im[ 56 ]
initial
begin
	input_im[56] = 1'b0;
end 
// input_im[ 55 ]
initial
begin
	input_im[55] = 1'b0;
end 
// input_im[ 54 ]
initial
begin
	input_im[54] = 1'b1;
end 
// input_im[ 53 ]
initial
begin
	input_im[53] = 1'b1;
end 
// input_im[ 52 ]
initial
begin
	input_im[52] = 1'b1;
end 
// input_im[ 51 ]
initial
begin
	input_im[51] = 1'b1;
end 
// input_im[ 50 ]
initial
begin
	input_im[50] = 1'b1;
end 
// input_im[ 49 ]
initial
begin
	input_im[49] = 1'b1;
end 
// input_im[ 48 ]
initial
begin
	input_im[48] = 1'b1;
end 
// input_im[ 47 ]
initial
begin
	input_im[47] = 1'b0;
end 
// input_im[ 46 ]
initial
begin
	input_im[46] = 1'b0;
end 
// input_im[ 45 ]
initial
begin
	input_im[45] = 1'b0;
end 
// input_im[ 44 ]
initial
begin
	input_im[44] = 1'b0;
end 
// input_im[ 43 ]
initial
begin
	input_im[43] = 1'b0;
end 
// input_im[ 42 ]
initial
begin
	input_im[42] = 1'b0;
end 
// input_im[ 41 ]
initial
begin
	input_im[41] = 1'b0;
end 
// input_im[ 40 ]
initial
begin
	input_im[40] = 1'b0;
end 
// input_im[ 39 ]
initial
begin
	input_im[39] = 1'b1;
end 
// input_im[ 38 ]
initial
begin
	input_im[38] = 1'b0;
end 
// input_im[ 37 ]
initial
begin
	input_im[37] = 1'b0;
end 
// input_im[ 36 ]
initial
begin
	input_im[36] = 1'b0;
end 
// input_im[ 35 ]
initial
begin
	input_im[35] = 1'b0;
end 
// input_im[ 34 ]
initial
begin
	input_im[34] = 1'b0;
end 
// input_im[ 33 ]
initial
begin
	input_im[33] = 1'b0;
end 
// input_im[ 32 ]
initial
begin
	input_im[32] = 1'b0;
end 
// input_im[ 31 ]
initial
begin
	input_im[31] = 1'b0;
end 
// input_im[ 30 ]
initial
begin
	input_im[30] = 1'b0;
end 
// input_im[ 29 ]
initial
begin
	input_im[29] = 1'b0;
end 
// input_im[ 28 ]
initial
begin
	input_im[28] = 1'b0;
end 
// input_im[ 27 ]
initial
begin
	input_im[27] = 1'b0;
end 
// input_im[ 26 ]
initial
begin
	input_im[26] = 1'b0;
end 
// input_im[ 25 ]
initial
begin
	input_im[25] = 1'b0;
end 
// input_im[ 24 ]
initial
begin
	input_im[24] = 1'b0;
end 
// input_im[ 23 ]
initial
begin
	input_im[23] = 1'b0;
end 
// input_im[ 22 ]
initial
begin
	input_im[22] = 1'b1;
end 
// input_im[ 21 ]
initial
begin
	input_im[21] = 1'b1;
end 
// input_im[ 20 ]
initial
begin
	input_im[20] = 1'b1;
end 
// input_im[ 19 ]
initial
begin
	input_im[19] = 1'b1;
end 
// input_im[ 18 ]
initial
begin
	input_im[18] = 1'b1;
end 
// input_im[ 17 ]
initial
begin
	input_im[17] = 1'b1;
end 
// input_im[ 16 ]
initial
begin
	input_im[16] = 1'b1;
end 
// input_im[ 15 ]
initial
begin
	input_im[15] = 1'b0;
end 
// input_im[ 14 ]
initial
begin
	input_im[14] = 1'b0;
end 
// input_im[ 13 ]
initial
begin
	input_im[13] = 1'b0;
end 
// input_im[ 12 ]
initial
begin
	input_im[12] = 1'b0;
end 
// input_im[ 11 ]
initial
begin
	input_im[11] = 1'b0;
end 
// input_im[ 10 ]
initial
begin
	input_im[10] = 1'b0;
end 
// input_im[ 9 ]
initial
begin
	input_im[9] = 1'b0;
end 
// input_im[ 8 ]
initial
begin
	input_im[8] = 1'b0;
end 
// input_im[ 7 ]
initial
begin
	input_im[7] = 1'b1;
end 
// input_im[ 6 ]
initial
begin
	input_im[6] = 1'b0;
end 
// input_im[ 5 ]
initial
begin
	input_im[5] = 1'b0;
end 
// input_im[ 4 ]
initial
begin
	input_im[4] = 1'b0;
end 
// input_im[ 3 ]
initial
begin
	input_im[3] = 1'b0;
end 
// input_im[ 2 ]
initial
begin
	input_im[2] = 1'b0;
end 
// input_im[ 1 ]
initial
begin
	input_im[1] = 1'b0;
end 
// input_im[ 0 ]
initial
begin
	input_im[0] = 1'b0;
end 
// input_re[ 63 ]
initial
begin
	input_re[63] = 1'b0;
end 
// input_re[ 62 ]
initial
begin
	input_re[62] = 1'b0;
end 
// input_re[ 61 ]
initial
begin
	input_re[61] = 1'b0;
end 
// input_re[ 60 ]
initial
begin
	input_re[60] = 1'b0;
end 
// input_re[ 59 ]
initial
begin
	input_re[59] = 1'b0;
end 
// input_re[ 58 ]
initial
begin
	input_re[58] = 1'b0;
end 
// input_re[ 57 ]
initial
begin
	input_re[57] = 1'b0;
end 
// input_re[ 56 ]
initial
begin
	input_re[56] = 1'b0;
end 
// input_re[ 55 ]
initial
begin
	input_re[55] = 1'b0;
end 
// input_re[ 54 ]
initial
begin
	input_re[54] = 1'b0;
end 
// input_re[ 53 ]
initial
begin
	input_re[53] = 1'b0;
end 
// input_re[ 52 ]
initial
begin
	input_re[52] = 1'b0;
end 
// input_re[ 51 ]
initial
begin
	input_re[51] = 1'b0;
end 
// input_re[ 50 ]
initial
begin
	input_re[50] = 1'b0;
end 
// input_re[ 49 ]
initial
begin
	input_re[49] = 1'b0;
end 
// input_re[ 48 ]
initial
begin
	input_re[48] = 1'b0;
end 
// input_re[ 47 ]
initial
begin
	input_re[47] = 1'b0;
end 
// input_re[ 46 ]
initial
begin
	input_re[46] = 1'b0;
end 
// input_re[ 45 ]
initial
begin
	input_re[45] = 1'b0;
end 
// input_re[ 44 ]
initial
begin
	input_re[44] = 1'b0;
end 
// input_re[ 43 ]
initial
begin
	input_re[43] = 1'b0;
end 
// input_re[ 42 ]
initial
begin
	input_re[42] = 1'b0;
end 
// input_re[ 41 ]
initial
begin
	input_re[41] = 1'b0;
end 
// input_re[ 40 ]
initial
begin
	input_re[40] = 1'b0;
end 
// input_re[ 39 ]
initial
begin
	input_re[39] = 1'b0;
end 
// input_re[ 38 ]
initial
begin
	input_re[38] = 1'b0;
end 
// input_re[ 37 ]
initial
begin
	input_re[37] = 1'b0;
end 
// input_re[ 36 ]
initial
begin
	input_re[36] = 1'b0;
end 
// input_re[ 35 ]
initial
begin
	input_re[35] = 1'b0;
end 
// input_re[ 34 ]
initial
begin
	input_re[34] = 1'b0;
end 
// input_re[ 33 ]
initial
begin
	input_re[33] = 1'b0;
end 
// input_re[ 32 ]
initial
begin
	input_re[32] = 1'b0;
end 
// input_re[ 31 ]
initial
begin
	input_re[31] = 1'b0;
end 
// input_re[ 30 ]
initial
begin
	input_re[30] = 1'b0;
end 
// input_re[ 29 ]
initial
begin
	input_re[29] = 1'b0;
end 
// input_re[ 28 ]
initial
begin
	input_re[28] = 1'b0;
end 
// input_re[ 27 ]
initial
begin
	input_re[27] = 1'b0;
end 
// input_re[ 26 ]
initial
begin
	input_re[26] = 1'b0;
end 
// input_re[ 25 ]
initial
begin
	input_re[25] = 1'b0;
end 
// input_re[ 24 ]
initial
begin
	input_re[24] = 1'b0;
end 
// input_re[ 23 ]
initial
begin
	input_re[23] = 1'b0;
end 
// input_re[ 22 ]
initial
begin
	input_re[22] = 1'b0;
end 
// input_re[ 21 ]
initial
begin
	input_re[21] = 1'b0;
end 
// input_re[ 20 ]
initial
begin
	input_re[20] = 1'b0;
end 
// input_re[ 19 ]
initial
begin
	input_re[19] = 1'b0;
end 
// input_re[ 18 ]
initial
begin
	input_re[18] = 1'b0;
end 
// input_re[ 17 ]
initial
begin
	input_re[17] = 1'b0;
end 
// input_re[ 16 ]
initial
begin
	input_re[16] = 1'b0;
end 
// input_re[ 15 ]
initial
begin
	input_re[15] = 1'b0;
end 
// input_re[ 14 ]
initial
begin
	input_re[14] = 1'b0;
end 
// input_re[ 13 ]
initial
begin
	input_re[13] = 1'b0;
end 
// input_re[ 12 ]
initial
begin
	input_re[12] = 1'b0;
end 
// input_re[ 11 ]
initial
begin
	input_re[11] = 1'b0;
end 
// input_re[ 10 ]
initial
begin
	input_re[10] = 1'b0;
end 
// input_re[ 9 ]
initial
begin
	input_re[9] = 1'b0;
end 
// input_re[ 8 ]
initial
begin
	input_re[8] = 1'b0;
end 
// input_re[ 7 ]
initial
begin
	input_re[7] = 1'b0;
end 
// input_re[ 6 ]
initial
begin
	input_re[6] = 1'b0;
end 
// input_re[ 5 ]
initial
begin
	input_re[5] = 1'b0;
end 
// input_re[ 4 ]
initial
begin
	input_re[4] = 1'b0;
end 
// input_re[ 3 ]
initial
begin
	input_re[3] = 1'b0;
end 
// input_re[ 2 ]
initial
begin
	input_re[2] = 1'b0;
end 
// input_re[ 1 ]
initial
begin
	input_re[1] = 1'b0;
end 
// input_re[ 0 ]
initial
begin
	input_re[0] = 1'b0;
end 

FFT_vlg_sample_tst tb_sample (
	.input_im(input_im),
	.input_re(input_re),
	.sampler_tx(sampler)
);

FFT_vlg_check_tst tb_out(
	.output_im(output_im),
	.output_re(output_re),
	.sampler_rx(sampler)
);
endmodule

